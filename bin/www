#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sampleapp:server');
var http = require('http');

const approot = require('app-root-path');
const configfile = require('../.config/config.json');
const runmode = configfile.runmode;
const config = configfile[runmode];
const esService = require(`${approot}/utils/elasticsearch.service`);
const kafka = require('kafka-node');
const moment = require('moment');
const port = config.EXPRESS_PORT;
/**
 * Get port from environment and store in Express.
 */

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
    console.log('Server listening at port %d', port);
});
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io')(server);
let numUsers = 0;
io.on('connection', async (socket) => {
    // elasticSearch.ping();
    let addedUser = false;

    // when the client emits 'new message', this listens and executes
    socket.on('new message', async (message, time) => {
        // we tell the client to execute 'new message'

        // const indexName = 'chat_log';
        // const docType = '_doc';
        const payload = {
            user_name: socket.username,
            message: message,
            timestamp: time,
        };

        socket.broadcast.emit('new message', {
            username: socket.username,
            message: message,
            time: time,
        });

        (Producer = kafka.Producer),
            (KeyedMessage = kafka.KeyedMessage),
            (client = new kafka.KafkaClient({ kafkaHost: 'kyj9168.ddns.net:6900' })),
            (producer = new Producer(client)),
            (payloads = [
                {
                    topic: 'chat_log',
                    messages: JSON.stringify({
                        user_name: socket.username,
                        message: message,
                        timestamp: time,
                    }),
                },
            ]);
        producer.on('ready', function () {
            producer.send(payloads, function (err, data) {
                console.log(data);
            });
        });
        // await esService.addDocument(indexName, docType, payload);
    });

    socket.on('set_keyword', async () => {
        let indexName = 'chat_log';
        let docType = '_doc';
        let payloadQuery = {
            query: {
                range: {
                    timestamp: {
                        gte: moment().add(-1, 'hours').format('YYYY-MM-DD HH:mm:ss'),
                    },
                },
            },
            aggs: {
                myagg: {
                    terms: {
                        field: 'message',
                        size: 30,
                    },
                    aggregations: {
                        messageAggs: {
                            terms: {
                                field: 'message',
                                script: '_value.length()>1',
                                size: 1,
                            },
                        },
                    },
                },
            },
            size: 0,
        };
        let result = await esService.search(indexName, docType, payloadQuery);

        socket.emit('keyword', {
            result,
        });
    });

    // setInterval(async () => {
    //     let indexName = 'chat_log';
    //     let docType = '_doc';
    //     let payloadQuery = {
    //         query: {
    //             range: {
    //                 timestamp: {
    //                     gte: moment().add(-1, 'hours').format('YYYY-MM-DD HH:mm:ss'),
    //                 },
    //             },
    //         },
    //         aggs: {
    //             myagg: {
    //                 terms: {
    //                     field: 'message',
    //                     size: 30,
    //                 },
    //                 aggregations: {
    //                     messageAggs: {
    //                         terms: {
    //                             field: 'message',
    //                             script: '_value.length()>1',
    //                             size: 1,
    //                         },
    //                     },
    //                 },
    //             },
    //         },
    //         size: 0,
    //     };
    //     let result = await esService.search(indexName, docType, payloadQuery);

    //     socket.emit('keyword', {
    //         result,
    //     });
    // }, 1000);

    // when the client emits 'add user', this listens and executes
    socket.on('add user', async (username) => {
        if (addedUser) return;

        console.log('username : ' + username);
        if (username == 'remove') {
            const indexName = 'chat_log';
            const docType = '_doc';
            const payload = {
                query: {
                    match_all: {},
                },
            };

            await esService.deletebyquery(indexName, docType, payload);
        }

        // we store the username in the socket session for this client
        socket.username = username;
        ++numUsers;
        addedUser = true;
        socket.emit('login', {
            numUsers: numUsers,
        });
        // echo globally (all clients) that a person has connected
        socket.broadcast.emit('user joined', {
            username: socket.username,
            numUsers: numUsers,
        });
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', () => {
        socket.broadcast.emit('typing', {
            username: socket.username,
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', () => {
        socket.broadcast.emit('stop typing', {
            username: socket.username,
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', () => {
        if (addedUser) {
            --numUsers;

            // echo globally that this client has left
            socket.broadcast.emit('user left', {
                username: socket.username,
                numUsers: numUsers,
            });
        }
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
